#include "Connection.h"

void bench()
{
	cout << blue << "Wait some time." << endl;
	vector<time_t> DateTime;
	for (int i = 2000; i <= 10000; i += 2000)
	{
		Date d(0, i, 1, 1, 0, 0, 0);
		time_t start = clock();
		vector<double> v = d.Stats();
		time_t finish = clock();
		DateTime.push_back(finish - start);
	}

	vector<vector<time_t>> SortListTimeOfInt;
	for (int i = 0; i < 5; i++)
	{
		vector<time_t> t;
		time_t start = clock();
		SortList<int> l(AutoGenerateInt(200 * (i + 1)));
		time_t finish = clock();
		t.push_back(finish - start);
		SortList<int> l1 = l;
		start = clock();
		l1.BubbleSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.SelectionSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.InsertionSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.QuickSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l.MergeSort();
		finish = clock();
		t.push_back(finish - start);
		SortListTimeOfInt.push_back(t);
	}
	cout << blue << "Wait some time." << endl;

	vector<vector<time_t>> SortListTimeOfString;
	for (int i = 0; i < 5; i++)
	{
		vector<time_t> t;
		time_t start = clock();
		SortList<string> l(AutoGenerateString(200 * (i + 1)));
		time_t finish = clock();
		t.push_back(finish - start);
		SortList<string> l1 = l;
		start = clock();
		l1.BubbleSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.SelectionSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.InsertionSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.QuickSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.MergeSort();
		finish = clock();
		t.push_back(finish - start);
		SortListTimeOfString.push_back(t);
	}
	cout << blue << "Wait some time." << endl;

	vector<vector<time_t>> SortListTimeOfVectorInt;
	for (int i = 0; i < 5; i++)
	{
		vector<time_t> t;
		time_t start = clock();
		SortList<vector<int>> l(AutoGenerateVectorInt(100 * (i + 1)));
		time_t finish = clock();
		t.push_back(finish - start);
		SortList<vector<int>> l1 = l;
		start = clock();
		l1.BubbleSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.SelectionSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.InsertionSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.QuickSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.MergeSort();
		finish = clock();
		t.push_back(finish - start);
		SortListTimeOfVectorInt.push_back(t);
	}
	cout << blue << "Wait some time." << endl;

	vector<vector<time_t>> SortListTimeOfDate;
	for (int i = 0; i < 5; i++)
	{
		vector<time_t> t;
		time_t start = clock();
		SortList<Date> l(AutoGenerateDate(50 * (i + 1)));
		time_t finish = clock();
		t.push_back(finish - start);
		SortList<Date> l1 = l;
		start = clock();
		l1.BubbleSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.SelectionSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.InsertionSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.QuickSort();
		finish = clock();
		t.push_back(finish - start);
		l1 = l;
		start = clock();
		l1.MergeSort();
		finish = clock();
		t.push_back(finish - start);
		SortListTimeOfDate.push_back(t);
	}

	string types[7]
	{
		"Number of element",
		"AutoGeneration",
		"Bubble sort",
		"Selection sort",
		"Insertion sort",
		"Quick sort",
		"Merge sort"
	};

	cout << blue << "In the next tables shown time of work different functions for different types." << endl;
	cout << blue << "Integer:" << endl;
	cout << colour << setw(18) << types[0] << violet << setw(16) << types[1] << blue << setw(14) << types[2] << yellow << setw(16) << types[3]
		<< green << setw(16) << types[4] << light_blue << setw(14) << types[5] << red << setw(14) << types[6] << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << colour << setw(18) << 200 * (i + 1) << violet << setw(16) << SortListTimeOfInt[i][0] << blue << setw(14) << SortListTimeOfInt[i][1] << yellow << setw(16)
			<< SortListTimeOfInt[i][2] << green << setw(16) << SortListTimeOfInt[i][3] << light_blue << setw(14) << SortListTimeOfInt[i][4] << red << setw(14)
			<< SortListTimeOfInt[i][5] << endl;
	}
	pause();
	cout << endl;

	cout << blue << "String:" << endl;
	cout << colour << setw(18) << types[0] << violet << setw(16) << types[1] << blue << setw(14) << types[2] << yellow << setw(16) << types[3]
		<< green << setw(16) << types[4] << light_blue << setw(14) << types[5] << red << setw(14) << types[6] << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << colour << setw(18) << 200 * (i + 1) << violet << setw(16) << SortListTimeOfString[i][0] << blue << setw(14) << SortListTimeOfString[i][1] << yellow << setw(16)
			<< SortListTimeOfString[i][2] << green << setw(16) << SortListTimeOfString[i][3] << light_blue << setw(14) << SortListTimeOfString[i][4] << red << setw(14)
			<< SortListTimeOfString[i][5] << endl;
	}
	pause();
	cout << endl;

	cout << blue << "Vector of Integer:" << endl;
	cout << colour << setw(18) << types[0] << violet << setw(16) << types[1] << blue << setw(14) << types[2] << yellow << setw(16) << types[3]
		<< green << setw(16) << types[4] << light_blue << setw(14) << types[5] << red << setw(14) << types[6] << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << colour << setw(18) << 100 * (i + 1) << violet << setw(16) << SortListTimeOfVectorInt[i][0] << blue << setw(14) << SortListTimeOfVectorInt[i][1] << yellow
			<< setw(16) << SortListTimeOfVectorInt[i][2] << green << setw(16) << SortListTimeOfVectorInt[i][3] << light_blue << setw(14) << SortListTimeOfVectorInt[i][4] << red
			<< setw(14) << SortListTimeOfVectorInt[i][5] << endl;
	}
	pause();
	cout << endl;

	cout << blue << "Date and Time:" << endl;
	cout << colour << setw(18) << types[0] << violet << setw(16) << types[1] << blue << setw(14) << types[2] << yellow << setw(16) << types[3]
		<< green << setw(16) << types[4] << light_blue << setw(14) << types[5] << red << setw(14) << types[6] << endl;
	for (int i = 0; i < 5; i++)
	{
		cout << colour << setw(18) << 50 * (i + 1) << violet << setw(16) << SortListTimeOfDate[i][0] << blue << setw(14) << SortListTimeOfDate[i][1] << yellow << setw(16)
			<< SortListTimeOfDate[i][2] << green << setw(16) << SortListTimeOfDate[i][3] << light_blue << setw(14) << SortListTimeOfDate[i][4] << red << setw(14)
			<< SortListTimeOfDate[i][5] << endl;
	}
	pause();
	cout << endl;

	cout << blue << "This is statistic for metod Stats()'class Date'" << endl;
	cout << colour << setw(18) << types[0] << violet << setw(8) << 2000 << blue << setw(8) << 4000 << yellow << setw(8) << 6000
		<< green << setw(8) << 8000 << light_blue << setw(8) << 10000 << endl;
	cout << colour << setw(18) << "Metod Stats():" << violet << setw(8) << DateTime[0] << blue << setw(8) << DateTime[1] << yellow << setw(8) << DateTime[2]
		<< green << setw(8) << DateTime[3] << light_blue << setw(8) << DateTime[4] << endl;
	pause();
}